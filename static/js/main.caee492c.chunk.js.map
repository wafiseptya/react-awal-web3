{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","name","color","gambar","menu","setState","console","log","react_default","a","createElement","className","src","_this2","id","items","map","index","style","concat","img","onClick","clicked","bind","key","showImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCsEzBC,2BAjEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,OAAQ,CACNC,KAAM,OACNC,MAAO,MACPC,OAAQ,YAPKX,uEAYXY,GACNT,KAAKU,SAAS,CACZL,OAAQI,wCAMV,OADAE,QAAQC,IAAIZ,KAAKI,MAAMC,OAAOG,QACvBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAKjB,KAAKI,MAAMC,OAAOG,0CAG9C,IAAAU,EAAAlB,KACP,OACEa,EAAAC,EAAAC,cAAA,OAAKI,GAAG,OAGNN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOhB,KAAKJ,MAAMwB,MAAMC,IAAI,SAACZ,EAAMa,GAChD,IAAIC,EAAQ,OAQZ,OANIL,EAAKd,MAAMC,OAAOC,OAASG,EAAKH,OAClCiB,EAAK,GAAAC,OAAMD,EAAN,KAAAC,OAAef,EAAKF,MAApB,gBAELI,QAAQC,IAAIH,EAAKH,MACjBK,QAAQC,IAAIM,EAAKd,MAAMC,OAAOoB,MAG9BZ,EAAAC,EAAAC,cAAA,KAAGC,UAAWO,EAEdG,QACER,EAAKS,QAAQC,KAAKV,EAAMT,GAE1BoB,IAAKP,GAEFb,EAAKH,SAMZO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,cAEaH,EAAAC,EAAAC,cAAA,QAAMC,UAAWhB,KAAKI,MAAMC,OAAOE,MAAQ,aACnDP,KAAKI,MAAMC,OAAOC,OAGtBN,KAAK8B,oBA1DIC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCcNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,CAAKnB,MA1BP,CACV,CACId,KAAM,OACNC,MAAO,MACPC,OAAQ,WAGZ,CACIF,KAAM,QACNC,MAAO,SACPC,OAAQ,cAGZ,CACIF,KAAM,QACNC,MAAO,QACPC,OAAQ,aAGZ,CACIF,KAAM,QACNC,MAAO,OACPC,OAAQ,eAIuBgC,SAASC,eAAe,SDiGzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.caee492c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      active: {\r\n        name: 'Home',\r\n        color: 'red',\r\n        gambar: 'red.png'\r\n      },\r\n    };\r\n  }\r\n\r\n  clicked(menu){\r\n    this.setState({\r\n      active: menu,\r\n    });\r\n  }\r\n  \r\n  showImage(){\r\n    console.log(this.state.active.gambar);\r\n    return <img className=\"image\" src={this.state.active.gambar}></img>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\">\r\n        {/* map akan loop sebanyak menu yang didefinisikan */}\r\n        {/* kemudian mengembalikan elemen <a/> */}\r\n        <nav className=\"nav\">{this.props.items.map((menu, index) => {\r\n          var style = 'menu';\r\n\r\n          if (this.state.active.name === menu.name) {\r\n            style = `${style} ${menu.color} is-activate`;\r\n            \r\n            console.log(menu.name);\r\n            console.log(this.state.active.img);\r\n          }\r\n          return(\r\n            <a className={style}\r\n            // bind untuk membuat 'menu' bisa dikirim ke fungsi 'clicked'\r\n            onClick={\r\n              this.clicked.bind(this, menu)\r\n            }\r\n            key={index}\r\n            >\r\n              {menu.name}\r\n            </a>\r\n          );\r\n        })}\r\n        </nav>\r\n\r\n        <div className=\"info\">\r\n        \r\n          ini adalah <span className={this.state.active.color + \" selected\"}>\r\n            {this.state.active.name}\r\n          </span>\r\n        </div>\r\n        {this.showImage()}\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './web.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst items = [\r\n    {\r\n        name: 'Home',\r\n        color: 'red',\r\n        gambar: 'red.png'\r\n    },\r\n\r\n    {\r\n        name: 'Tab 2',\r\n        color: 'yellow',\r\n        gambar: 'yellow.png'\r\n    },\r\n\r\n    {\r\n        name: 'Tab 3',\r\n        color: 'green',\r\n        gambar: 'green.png'\r\n    },\r\n\r\n    {\r\n        name: 'Tab 4',\r\n        color: 'blue',\r\n        gambar: 'blue.png'\r\n    },\r\n];\r\n\r\nReactDOM.render(<App items={items} />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}